#!/usr/bin/env python
# encoding: utf-8
'''
@author: Miao Feng
@contact: skaudreymia@gmail.com
@software: PyCharm
@file: Pred3D.py
@time: 2020/12/10 15:56
@desc: Predict 3D pose by siamese model
'''
import numpy as np
import os
import cv2
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' # make sure it's before import tensorflow
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.python import keras
from tensorflow.keras.models import Model
from tensorflow.python.keras import backend as K
import copy
SH_NAMES = ['RFoot', 'RKnee', 'RHip', 'LHip', 'LKnee', 'LFoot',
            'Hip', 'Thorax', 'Neck', 'Head', 'RWrist', 'RElbow',
            'RShoulder', 'LShoulder', 'LElbow', 'LWrist']

H36M_NAMES = ['RHip', 'RKnee', 'RFoot', 'LHip', 'LKnee',
              'LFoot', 'Spine', 'Thorax', 'Neck', 'Head', 'LShoulder',
              'LElbow', 'LWrist', 'RShoulder', 'RElbow', 'RWrist']


def initializer_he(shape, dtype=None):
    '''
    He et al. initialization from https://arxiv.org/pdf/1502.01852.pdf
    '''
    return K.truncated_normal(shape, dtype=dtype) * K.sqrt(K.constant(2. / float(shape[0])))


class HeInitializerClass:
    """ Wrapper around the function ``initializer_he``, needed for loading models."""

    def __init__(self):
        self.__name__ = 'initializer_he'

    def __call__(self, shape, dtype=None):
        return initializer_he(shape, dtype=dtype)

def apply_to_pose_dict(data_dict, func, *func_args):
    """
    Apply func on all arrays in the given pose dict.

    Parameters:
        data_dict: dict, dictionary whose values are updated by ``func``
        func, *func_args: function which accepts values of the dict as parameters and other args
    """
    data_dict = func(data_dict, *func_args)

    return data_dict


def normalize_pose_arr(data_arr, data_mean, data_std):
    """
    Normalizes a pose array.

    Parameters:
        data_arr: ndarray(nTimePoints, nJoints=16, nCoords=(2 or 3)) of float64
        data_mean, data_std: ndarray(nJoints=16, nCoords=(2 or 3)) of float64
    """
    return (data_arr - data_mean) / data_std

def inverse_normalize_pose_arr(data_arr, data_mean, data_std):
    """
    Inverse Normalizes a pose array.

    Parameters:
        data_arr: ndarray(nTimePoints, nJoints=16, nCoords=(2 or 3)) of float64
        data_mean, data_std: ndarray(nJoints=16, nCoords=(2 or 3)) of float64
    """

    return (data_arr * data_std) + data_mean


class Detect3D(object):
    def __init__(self,model_folder=''):
        if len(model_folder) == 0:
            print("Please set siamese model's path")
            exit(0)

        self.inp_dim = 32
        self.out_dim = 48
        self.r_dim = (1, 3, 3)
        self.out_dim_xy = (-1,16, 3)

        m = load_model(os.path.join(model_folder, 'model.h5'),
                       custom_objects={'initializer_he': HeInitializerClass, 'tf': tf})
        self.model = self._cut_main_branch(m)
        print('load siamese model done')
        self._flipJoints()

    def _cut_main_branch(self,model):
        """
        Gets the pose estimator part of a siamese model-py37. The returned model-py37
        expects a 2D pose and returns a 3D pose.
        """
        main_branch = model.layers[2]
        assert isinstance(main_branch, keras.engine.training.Model), "Incorrect layer is selected"
        assert main_branch.outputs[-1].shape[1] == self.out_dim, "Got layer with shape: " + str(main_branch.outputs[-1].shape)
        main_branch = Model(inputs=main_branch.inputs, outputs=main_branch.outputs[-1])
        # Keep only the pose output and throw away the embedding

        return main_branch
    def preprocess(self,input_arr):
        '''
        The output of MPII's HG model is
        ['RFoot','RKnee','RHip','LHip','LKnee','LFoot','Hip','Thorax','Neck','Head','RWrist','RElbow','RShoulder','LShoulder','LElbow','LWrist']
        But the input of h36m's siamese model is
        ['Hip','RHip','RKnee','RFoot','LHip','LKnee','LFoot','Spine','Thorax','Head','LShoulder','LElbow','LWrist','RShoulder','RElbow','RWrist']
        No spine joint contains in the output of MPII's HG model, aka the original input for siamese model

        Therefore this function will take the mean of thorax and hip joint as the coordinates of spine.
        :param input_arr: Joints in order ['RFoot','RKnee','RHip','LHip','LKnee','LFoot','Hip','Thorax','Neck','Head','RWrist','RElbow','RShoulder','LShoulder','LElbow','LWrist']
        :return: Joints in order ['RFoot','RKnee','RHip','LHip','LKnee','LFoot','Hip','Spine','Thorax','Head','RWrist','RElbow','RShoulder','LShoulder','LElbow','LWrist']
        '''
        # [6,2, 1, 0, 3, 4, 5, 7, 8, 9, 13, 14, 15, 12, 11, 10]
        # Output of 8HG
        # ['RFoot','RKnee','RHip','LHip','LKnee','LFoot','Hip','Thorax','Neck','Head','RWrist','RElbow','RShoulder','LShoulder','LElbow','LWrist']
        ind_inp_hip = SH_NAMES.index('Hip')
        ind_inp_thrx = SH_NAMES.index('Thorax')
        ind_inp_head = SH_NAMES.index('Head')

        tmp = copy.deepcopy(input_arr)
        spine = np.mean(tmp[:,[ind_inp_hip,ind_inp_thrx],:],axis=1)
        nose = np.mean(tmp[:,[ind_inp_thrx,ind_inp_head],:],axis=1)
        thorax = tmp[:,ind_inp_thrx,:]
        input_arr[:,7,:] = spine
        input_arr[:,8,:] = thorax
        input_arr[:, 9, :] = nose
        return input_arr

    def normalize(self,input_arr):
        self.act_direction_mean_2d = np.array([[531.67634331,385.02022893], [536.92579434,383.22197142], [533.72465753,479.04724014],
         [534.09171129,571.50669048], [529.96918649,381.97867284], [530.30405677,481.28543583],
         [531.64962756 ,576.07100779], [535.90766863,330.54211047], [535.93674194,273.91831371],
         [535.99016416 ,236.54980225], [532.61431086,284.23064348], [529.4371431,326.17390033],
         [525.83837378, 317.13177666], [539.26583295,286.68787066], [539.27658839,325.53825263],
         [534.04820177 ,306.62164414]])
        self.act_direction_std_2d = np.array([[70.57128225,25.82179548], [82.74363212,27.08013552], [74.49581177,31.99737603], [78.63309452,40.3364679 ], [63.11182297,26.17208713], [64.30204334,31.30136382], [74.88783477,39.30731918], [76.67747521,25.02456672], [77.27802691,25.27799115], [78.36832205,28.60381589], [68.83147801,25.55275336], [65.82073592,32.97009114], [58.44679355,43.61228343], [90.23472544,25.35382061], [97.4621034,37.23799345], [95.52027638,46.26941459]])
        input_arr = apply_to_pose_dict(input_arr, normalize_pose_arr, self.act_direction_mean_2d, self.act_direction_std_2d)

        # input_arr / w * 2 - [1, h / w]
        return input_arr

    def post_process(self,pose_normed):
        self.act_direction_mean_3d = [[ 1.06871268e+01,-6.29158010e+00,1.31659764e+01], [ 2.50282428e+00,4.12482269e+02,1.04076181e+02], [ 7.08400555e+00,8.37098897e+02,1.90271670e+02], [-1.06871456e+01,6.29159137e+00,-1.31659996e+01], [-1.04434188e+01 ,4.31776345e+02  ,8.92133179e+01], [-2.39938775e+00 , 8.61533830e+02 , 1.80780333e+02], [ 7.30103694e+00 ,-2.19503680e+02, -5.29417782e+01], [ 7.90849183e+00, -4.67264107e+02 ,-1.10056682e+02], [ 2.31986794e+00 ,-5.53529977e+02 ,-1.21050845e+02], [ 8.66604735e+00, -6.39365191e+02, -1.47207798e+02], [-3.27513691e+00, -4.17391154e+02, -1.14095361e+02], [-1.77053532e+01 ,-2.39096645e+02 ,-8.35146414e+01], [-3.05274583e+01, -2.85840083e+02 ,-7.81459271e+01], [ 1.95679462e+01, -4.17053612e+02, -8.40345586e+01], [ 1.71812581e+01 ,-2.55984017e+02, -2.88980957e+01], [ 9.51171163e-02, -3.38948949e+02 ,-3.61645477e+01]]
        self.act_direction_std_3d = [[ 93.05981376,  25.13726168,  89.75620024], [ 74.70122489 , 22.52884469 , 77.89219366], [102.68203763 , 40.1725551  , 99.0778641 ], [ 93.05997778 , 25.13730624 , 89.75635837], [ 86.88108257,  21.80595367 , 77.57318348], [125.67038217,  27.69677596 , 94.28374703], [ 39.95699715 , 11.76259167 , 41.68797308], [ 54.02513425 , 15.31167605 , 53.22417387], [ 68.85895713  ,21.05126658,  55.35099663], [ 66.77688233 , 18.94020853 , 61.65985183], [ 98.92157014 , 28.2561175 ,  95.27391147], [202.26307849 ,100.11210011, 195.51100852], [219.82629753 ,150.580154, 229.52556873], [120.14262969 , 32.89267039 ,118.68943405], [211.32650729, 120.57100047, 196.19920582], [272.15670729, 169.82894761, 242.05168628]]

        input_arr = apply_to_pose_dict(pose_normed, inverse_normalize_pose_arr, self.act_direction_mean_3d,
                                       self.act_direction_std_3d)

        # input_arr / w * 2 - [1, h / w]
        return input_arr


    def predict3Dpose(self,pose2d):
        """
        Predict 3D by pose2D
        :param model_folder: the folder that contains the ``model-py37.h5`` and ``normalisation.pkl`` files.
        :return ['RHip', 'RKnee', 'RFoot', 'LHip', 'LKnee',
              'LFoot', 'Spine', 'Thorax', 'Neck', 'Head', 'LShoulder',
              'LElbow', 'LWrist', 'RShoulder', 'RElbow', 'RWrist']
        """
        # input_pose = self.preprocess(pose2d) # add spine and delete neck
        # input_pose = input_pose[:, self.SH_TO_GT_PERM, :] # flip from mpii joints order to H3.6m joints order
        #
        # input_pose = self.normalize(input_pose)
        # input_pose = input_pose.reshape((-1, self.inp_dim))

        input_pose = pose2d
        # print(input_pose)
        data_2d_input = [input_pose, np.random.random_sample(input_pose.shape)]
        data_2d_input.append(np.zeros(self.r_dim))  # Add dummy values
        # Result is [pose1, pose2, embedding_dist]
        preds = self.model.predict(data_2d_input, batch_size=1, verbose=0)  # (nSample, 16*3)
        preds = preds.reshape(self.out_dim_xy)
        preds = self.post_process(preds) # inverse normalization
        H36_JOINT_NAMES16_2D = ['RHip', 'RKnee', 'RFoot', 'LHip', 'LKnee', 'LFoot', 'Spine','Thorax', 'Neck',
                 'Head', 'LShoulder', 'LElbow', 'LWrist', 'RShoulder', 'RElbow', 'RWrist']
        preds_dict = {}
        for idx,i in enumerate(H36_JOINT_NAMES16_2D):
            preds_dict[i] = preds[:,idx,:].tolist()

        print(preds_dict)
        return preds_dict

    def _flipJoints(self):
        '''
        Define the index to flip joints from MPII from HG to h3.6m for siamese model
        Here self.SH_TO_GT_PERM will be set.
        The input of siamese model is organized as
        ['Hip','RHip','RKnee','RFoot','LHip','LKnee','LFoot','Spine','Thorax','Head','LShoulder','LElbow','LWrist','RShoulder','RElbow','RWrist']

        :param
        :return:
        '''

        # Stacked Hourglass produces 16 joints. These are the names.
        # self.SH_TO_GT_PERM = np.array([SH_NAMES.index(h) for h in H36M_NAMES if h != '' and h in SH_NAMES])
        self.SH_TO_GT_PERM = np.array([6,2, 1, 0, 3, 4, 5, 7, 8, 9, 13, 14, 15, 12, 11, 10])
# if __name__=='__main__':
#     preds_2d = np.array([[622.,387.],[616.,263.],[581.,181.], [640.,192.], [663.,245.], [681.,281.], [610.,186.], [651.,163.], [634.,181.], [704.,116.], [610.,216.], [557.,157.], [610.,151.], [699.,175.], [693.,240.], [687.,304.]])
#
#     img = cv2.imread("%s/../../data/MPII/images/015601864.jpg" % os.getcwd())
#     model_path = "%s/../../data/model/siamese"%os.getcwd()
#     predictor_3d = Detect3D(model_path)
#     pred_3d = predictor_3d.predict3Dpose(preds_2d)
#
#     # print(pred_3d)


if __name__=='__main__':
    # siamese
    aa = np.array([[-0.46302608,-1.2400466 ,-0.8813463, -1.11602, -1.0164955,-0.09523407,-1.2347436,0.35931033,0.04802291,-0.877984, -0.16024463,-0.16885641,-0.24903414,0.25259906,-0.39004505,-1.8598568,-0.29680806,-2.6077354,-0.2933604,-2.1867642,0.31069636,-2.4353793,1.42148,-2.5227077,2.7231884,-1.5622153,-0.83411163,-2.5514052,-1.6137204,-2.5924666,-2.2408667,-1.6776016 ]])
    # mine
    bb = np.array([[-0.43468593,-0.89150381,-0.73632004,-0.78367301,-0.98964835,-0.09523406,-1.14572257,0.26014448,-0.07873622,-0.76335803,-0.20689944,-0.04106645,-0.19562093,-0.05268759,-0.42916996,-1.50021021,-0.40033038,-1.97477376,-0.31888094,-2.08188315,0.31069635,-2.35710973,1.2999377,-2.49237711,2.63764044,-1.58514462,-0.87844045,-2.63028881,-1.56241845,-2.61932085,-2.31414952,-1.78566435]])

    # mix one
    input = copy.deepcopy(bb)

    # add noise
    noise = np.random.normal(0, 0.1, input.shape)
    input = np.concatenate((input,bb+noise),axis=0)
    # input = np.concatenate((input, bb), axis=0)
    # input = np.concatenate((input, bb+noise), axis=0)

    # replace_name = ''
    # for idx in range(len(SH_NAMES)):
    #     tmp = copy.deepcopy(aa.reshape((-1,16,2)))
    #     tmp[:,idx,:] = bb.reshape((-1,16,2))[:,idx,:]
    #     tmp = tmp.reshape((-1,32))
    #     input = np.concatenate((input,tmp),axis=0)
    #
    siamese_model = "%s/../../data/model/siamese" % os.getcwd()
    tool = Detect3D(siamese_model)

    pose_pred = tool.predict3Dpose(input)
    #
    # from utils.plot import plot3dPose
    # # plot3dPose(pose_pred,'')
    # Result after mixing one joint with what used in siamese original input
    # aaa = {'RHip': [[-63.323149584419056, -16.289845528580113, -4.649057144414998], [-63.132134531239004, -16.145489054235206, -4.483218689862133], [-63.02309559302101, -14.692576432352581, -7.588358310926134], [-63.24907210858726, -16.28781383709816, -4.702664343932183], [-63.15574724667263, -16.508008140388874, -3.1412759143533346], [-62.60574348246048, -16.99622914720305, -3.283684541278598], [-62.83178101279529, -16.87831163147948, -3.6373628583346775], [-63.94420227322345, -15.9357678508404, -5.0585802509883155], [-64.4112204053937, -15.874602100682953, -5.57722499110889], [-64.01298810458175, -16.150133027500924, -5.311195200934867], [-63.39887445900203, -16.2793694320891, -5.108901282764828], [-63.45661661725056, -16.303716767326364, -4.623405776446633], [-63.03255288214817, -16.166170055360126, -5.691318006622806], [-63.3586047117509, -16.46735782947674, -3.6488223150713655], [-63.32969480504666, -16.230812604989453, -4.844317299398968], [-62.975187906105305, -16.324216474447365, -4.4814278153791225], [-63.458269562798876, -16.444253332059738, -3.489992211744015]], 'RKnee': [[-75.19789868878718, 407.45427716771655, 104.03439548254629], [-74.62548014974838, 407.4030259480224, 103.33461323319221], [-75.73219458056984, 408.2827195450139, 100.92421527013634], [-74.68166229913848, 407.4541687346959, 104.06352459190192], [-73.48155138982544, 407.2576411024737, 104.44721892814361], [-74.31026703483928, 406.8887160457389, 105.42755654129716], [-74.56294867835555, 406.97367751373037, 105.31037909426063], [-75.97632734733631, 407.96697165298673, 101.94301389307863], [-76.82243461348803, 407.58654094635654, 103.54023829325158], [-76.81586266448662, 407.86484386143445, 103.17783034181134], [-74.95486124685428, 407.501292785487, 104.1014998553808], [-75.16394361894656, 407.45770203978003, 104.02453082809593], [-75.25355543846037, 407.4611195263127, 103.96240114745748], [-75.120442303402, 407.3608508742907, 104.74062943092764], [-75.03304784879518, 407.48649184602334, 104.0802871921575], [-75.16824477256131, 407.42027686948165, 104.26947928625519], [-74.85331662021053, 407.32114323926385, 104.70158807907218]], 'RFoot': [[-38.96124173816647, 836.3780117614116, 210.73550028312215], [-37.282004729740166, 835.8972810269582, 210.86015802513495], [-42.29132050078951, 836.2086768761907, 207.48389458107297], [-38.46374794838792, 836.3876264599071, 210.7178900794539], [-34.16232748716821, 835.1168165640219, 211.11582192262242], [-37.02737161095709, 836.0392981422218, 211.432885312913], [-37.22634648166091, 835.9982398507944, 211.5373890567471], [-38.973078449381035, 836.835943990378, 208.38590816961855], [-43.40924401613328, 837.0247773559314, 210.8680935419623], [-40.292706500993106, 837.004997225962, 208.9997082161198], [-39.436800278207166, 836.7392218834489, 210.95060372408904], [-38.89375595936222, 836.3270137220671, 210.77152531495557], [-40.45265205038602, 836.8582353170024, 210.85928105825207], [-37.91210763114542, 836.0446863003116, 211.23800230700985], [-39.22659766876336, 836.4613267769402, 211.16531740199684], [-38.90432576301659, 836.4076680314886, 210.62458168894108], [-37.50285670708126, 835.8137015720523, 210.9693684531822]], 'LHip': [[41.03871482827041, 18.590050020102005, -20.05965873051772], [41.019755842223375, 18.4152800430678, -20.061058397021302], [39.30171005455121, 17.13014000816286, -17.12683612503696], [40.94573370389756, 18.58821235489561, -20.021628995818403], [41.10620282804637, 18.766489852719193, -21.608433519002958], [40.366469563797025, 19.24317706082741, -21.08767933744374], [40.87138430396356, 19.05151299978611, -20.815045300887306], [41.59313482018351, 18.475559657078115, -20.192558837185786], [42.28323525612717, 18.223237661223717, -19.14414375851599], [41.679620633654935, 18.494576083331317, -19.440901812965496], [41.06135134730433, 18.591620238721084, -19.727340587043876], [41.09819878566314, 18.602984845806695, -20.247252160005623], [40.43760181571837, 18.480936307378272, -19.0187669428968], [41.392112990654404, 18.740519066045703, -21.041918334494106], [41.02927970970224, 18.528393468199578, -19.858124141163522], [40.60178730050249, 18.633459522908574, -20.180135710268903], [41.280616624787996, 18.71384857317459, -21.241219342328016]], 'LKnee': [[58.122976896469, 436.4006361833178, 67.21830449598377], [58.095313263653594, 436.2926134895075, 67.58040897610994], [58.56731946736508, 434.7236061605121, 70.99434801951313], [57.99062438289798, 436.4160520285326, 67.19674639194699], [57.378580747776056, 436.5517581269497, 66.10294020999387], [56.90417171261072, 437.1274024823812, 66.09083761753999], [56.963698754769695, 437.01981779964433, 65.79238791881313], [59.18507500570591, 436.09187249472944, 68.40453656976385], [59.82342550243442, 435.99930398834965, 68.4297173600232], [58.391146350858065, 436.30031962497776, 67.36023195602901], [58.38204769813312, 436.4458068875847, 67.2455682730246], [58.180334140397036, 436.36551633848603, 67.1091730964067], [57.975694721084636, 436.2803118120422, 67.90156808566289], [58.26842587716661, 436.54099143784504, 66.58825994704746], [58.38604551253475, 436.36035768581587, 67.38736395699155], [57.76131969157139, 436.4698026158781, 67.14222346158738], [58.106250289581354, 436.40588289311023, 66.50621199935146]], 'LFoot': [[45.67001192562361, 851.3473091591597, 205.6847519582426], [45.73624326693478, 850.9576500723762, 206.1860701196963], [42.47427854724426, 851.2839971618151, 209.13906008887471], [45.59710276925037, 851.4015843680643, 205.44452172718607], [45.81341079443847, 851.2959312033995, 203.66489465818717], [45.606664441630336, 851.4845440339546, 203.9493003331592], [45.637667780432295, 851.4563531830602, 203.95285060974774], [45.976749476708456, 850.6848889592561, 207.86683596482976], [46.043962078561556, 851.0522507528235, 207.5888101101936], [45.9029114935627, 850.8643576956991, 207.44898512910893], [45.97457722054693, 851.4872324537527, 205.79563242081608], [45.843605155083715, 851.3786044456884, 205.7858877756169], [45.18713436199273, 851.3718639986295, 206.38135359625278], [46.431121796123136, 851.3828851165736, 204.90557934450487], [45.762426444219685, 851.3682626551911, 205.98896303450826], [45.53487512076106, 851.461243019991, 205.2612392251526], [46.537378829845096, 851.2213339510721, 204.77753897759706]], 'Spine': [[-6.1200448065475905, -227.82696836029703, -18.10858430864006], [-6.175961733264532, -227.75583073151543, -17.656992363736606], [-7.794106400122604, -227.87622940670173, -18.94439293248722], [-6.18414617940303, -227.81290629534385, -18.178218254915414], [-5.5616424218622855, -227.77819808746102, -17.683979742072914], [-5.041592497060971, -227.7906097510132, -18.316092176446254], [-5.224991728645812, -227.82883820759372, -18.028996266276394], [-6.566173928425365, -227.81166393710998, -17.852968289469437], [-7.093435406524331, -227.79556095521616, -18.321094072458678], [-6.571448031720492, -227.96891690288447, -17.901175832706947], [-6.419050381798637, -227.83567889003618, -18.29457880551948], [-6.08762377780224, -227.80366783346582, -18.129086367258317], [-6.292287326962405, -227.83575601159697, -18.43108360399873], [-5.832415051747744, -227.84482059941067, -17.669535618118495], [-6.381175437250241, -227.86432534324058, -18.05300188842049], [-5.989004357483293, -227.81322249374313, -18.334934390784177], [-5.828523480384349, -227.80223547575034, -17.901498856294438]], 'Thorax': [[-3.712462958687218, -474.63363624928684, -66.97666649777467], [-3.920309886867492, -474.7167336723652, -66.61853018884486], [-5.537884081696256, -474.47111572, -67.79521120399633], [-3.835965330826329, -474.6123446508233, -67.02204462147748], [-3.029750327374509, -474.7426049335343, -66.66251245303778], [-2.267780975339382, -474.63038813857156, -67.25667591545528], [-2.4384045918949573, -474.7244893466721, -66.78472947035112], [-4.3678896579914595, -474.6287919189478, -66.70670092374921], [-4.981696737336246, -474.5088970246741, -67.00176658968857], [-4.510265323043963, -474.71534234199555, -66.7970574477497], [-4.390393668830096, -474.58130415697883, -67.16485373896943], [-3.626745009124888, -474.61726792512883, -66.93911787695907], [-3.6143562911311937, -474.59539862110677, -67.25765301711219], [-3.351472187412745, -474.7468272949348, -66.50149688616591], [-4.220278835806394, -474.6817902435745, -66.91333254492216], [-3.564398095502189, -474.5894248900905, -67.19643188797232], [-3.3071677682779717, -474.6648026884189, -66.86437594502132]], 'Neck': [[-19.217747933889584, -550.5205714327501, -117.68584849349799], [-19.335379616096233, -550.4843906223084, -117.82153991104431], [-18.811061752188223, -550.6653668228295, -118.13513694654448], [-19.324460089552353, -550.5109255170133, -117.70274563829932], [-19.522271591641704, -550.5815229548037, -117.1691927122697], [-18.40821310377705, -550.5817513198983, -117.4943529489776], [-18.77823955569456, -550.5787348930454, -117.2309042209514], [-19.335636135701193, -550.4882856901362, -118.00693342244404], [-19.977162937506876, -550.3970663824097, -118.6725389805477], [-19.499258704841658, -550.5927736999685, -118.44132155726102], [-19.666568999823014, -550.436240720457, -117.86728134351895], [-19.250426479404467, -550.5145715163177, -117.61725325306554], [-18.196666515959798, -550.5012689358738, -117.95485303473689], [-19.6613175304703, -550.6224517516061, -117.12904956990508], [-19.685317504710227, -550.5902949348904, -117.78495328093815], [-19.325681122871956, -550.4999545818271, -117.76081403133962], [-19.51425997133964, -550.6658731157725, -117.46490449960916]], 'Head': [[2.7914509411914894, -642.240186929702, -113.28089824605514], [2.2100767464786077, -642.1402472036812, -113.16271807865161], [1.5558955123975178, -642.2168797209728, -113.9018807061043], [2.662372654665173, -642.2271670445806, -113.33089585139655], [3.2296683407678355, -642.251673171024, -113.05320774004844], [3.9591755911084503, -642.2777555581629, -113.5019145642274], [3.894065287372997, -642.3311864211569, -113.1105006443168], [2.5028546991354146, -642.2187145053562, -113.00106013477138], [1.4241524737025495, -642.1279772065934, -113.15836662579036], [2.8098305667729537, -642.3434761744217, -112.70950911785522], [2.0297945206428984, -642.1532888205973, -113.3297050822014], [2.8635186561155956, -642.2585014702659, -113.26583722086482], [3.1553786722990704, -642.2729254551115, -113.6892291740065], [2.8312878915544335, -642.3736444212003, -112.88747398432437], [2.292994022743599, -642.3066450158259, -113.21605277791022], [2.8014860515801567, -642.2335900599624, -113.48860661590771], [2.9928616267632187, -642.2518261402804, -113.12283098582816]], 'LShoulder': [[83.87604411022483, -430.0892850031871, -81.41002125191582], [83.76052015656332, -430.3450200372756, -81.60778717469458], [81.11816841167546, -430.00757961009464, -78.07176052852265], [83.61920628949828, -430.10125963565446, -81.45292434150804], [84.68448183463843, -430.03788755644706, -82.86618788891161], [84.5364286280626, -430.0551135115632, -83.35556704864527], [84.81890895756645, -430.0257108204782, -82.46009921429362], [83.93602600072646, -430.2492322406141, -80.87220504351549], [83.28380180299624, -430.2033286407248, -80.08768897150037], [83.85274238691188, -430.74326498709627, -80.08706714644276], [83.17751127512118, -430.267206820784, -81.10724639714576], [84.06177393926261, -430.01195346670755, -81.49238893728845], [83.41742704475762, -430.05155480573995, -80.57855028959057], [84.30575218039768, -430.04707905527835, -82.22096914795569], [83.6098608361959, -430.0943098014946, -81.09169793132135], [83.57624078904755, -430.0023139717811, -81.75733468136116], [84.29288670462114, -429.9511413651866, -82.37208967326119]], 'LElbow': [[186.57664095373406, -275.93759060405824, -142.8062243513206], [186.322383732193, -278.06937445643564, -142.2880691649754], [183.25406930842857, -278.5999164055189, -137.01991532537838], [186.45275535825962, -276.02582082725064, -142.65449754927369], [187.59494775670638, -275.740868712871, -146.36450919342616], [187.20096359359772, -275.8763736515538, -146.30478570183703], [187.25439498316007, -275.2294574343921, -145.1706220298542], [188.8620866626947, -276.7976174793488, -141.85815325244738], [186.19406159534697, -277.43575005735596, -139.27280196176244], [190.57659289807827, -276.671239290725, -141.61922432599823], [186.79837157576264, -276.5516934844599, -141.85551959213535], [186.53000904605645, -275.97616223686737, -143.0679122980768], [182.8084982960561, -275.63101056840446, -140.68687361544772], [185.99506824784783, -275.66476373068554, -146.0355172416606], [186.44571475999598, -275.38946944237364, -142.14338099491286], [186.6031637554121, -275.9599345828723, -143.11805672428324], [186.8906227023265, -275.2008837549821, -145.93563625699517]], 'LWrist': [[104.1321892237516, -268.60392032707426, -213.8518393764348], [103.09981687969366, -270.3876555773546, -213.48795772425362], [103.65154403969404, -268.9200026427229, -204.3563450634168], [104.02030553848411, -268.5999083784388, -213.58964703625688], [103.79082540453695, -267.58784384921347, -214.97484070363777], [104.77931691220175, -268.643523735025, -215.81125684210883], [103.97973967719025, -268.1038841081781, -215.538242997048], [107.01245709429324, -270.0869254723121, -212.0965940205868], [104.76943750024583, -271.06862551892596, -214.3831738981061], [108.72033750650496, -270.08736301704585, -212.95481733830354], [104.31066066970877, -268.9189850707396, -213.29367682559112], [104.21425123579402, -269.1988465358022, -213.9775658364523], [102.71072003958318, -269.50040012247183, -212.0600252689408], [101.41400136102806, -268.8730238012349, -216.59152701845673], [103.54394492698572, -268.0603775768206, -213.8120556391409], [104.19603852675058, -268.42226297272407, -214.09491965299526], [103.76958597909854, -268.0737496170292, -215.0915241614712]], 'RShoulder': [[-72.17131064134759, -446.8702563935288, -53.098262673154366], [-72.22611422407655, -446.90371916221557, -52.55411785205747], [-73.52856043120576, -446.18653015644156, -58.82878140911831], [-72.11621345520928, -446.8436967422867, -53.19540183014803], [-70.94554505147457, -447.31528102450187, -50.571452547917154], [-70.0754262841092, -447.3708314163446, -51.48478771323148], [-70.738819607045, -447.3552312727753, -51.45218514932461], [-73.13997273837887, -446.78813066599645, -53.724414420758464], [-74.29090526415709, -446.11548156993814, -55.742441321012166], [-73.63295434588272, -447.1786087097652, -54.421402551654204], [-72.80531497911161, -446.7352485907803, -53.7065090091824], [-72.23899696879488, -446.9302454840068, -52.9251864605078], [-71.97695234540527, -446.6453178900735, -54.697938934823945], [-71.99271383574714, -447.1706723793431, -51.32717622982447], [-72.77600476558626, -446.8829666776509, -53.4524552012749], [-71.60321668845711, -446.9520409843285, -53.23042739028754], [-71.6812937121725, -447.3061663999632, -51.55841850093741]], 'RElbow': [[-180.24275897352953, -347.28229051122304, -111.376773197599], [-180.833198414091, -346.6417136642126, -110.86956437613392], [-182.50143073296886, -349.39654265605276, -119.83671275342869], [-180.1743498726935, -347.2675508117423, -111.57087073550979], [-179.6492335028254, -346.69961603316267, -109.09503516404423], [-177.33108323590167, -348.52786338996884, -107.85546554657597], [-178.04580781694358, -347.40538245305953, -109.05104673874817], [-182.22202534266412, -346.2034824917904, -112.41238106427937], [-180.48799130351975, -346.49715537310794, -113.60493925819583], [-183.89620299308217, -350.59090388267765, -114.8854392195525], [-180.4679384056131, -347.0053408286826, -112.27121815540026], [-180.54108361801502, -347.7878313010694, -111.13856444336048], [-180.7178312709208, -347.4033270878467, -112.44183337030307], [-180.9279710295744, -347.8924033962155, -110.07303649529769], [-180.21079022045978, -347.26607756045337, -112.16318543630283], [-178.91494726949142, -348.12859073089885, -110.73454101883807], [-181.51540001624159, -348.3348243515715, -109.42726676538639]], 'RWrist': [[-101.76087556918424, -383.09988822386, -214.048894061946], [-100.54049304289775, -383.38141274952955, -214.23186240934064], [-98.73286499502979, -384.74244107725855, -221.87264483458097], [-101.69204645540091, -383.10745992424296, -213.95324036826787], [-103.11705892649526, -384.21648627198016, -211.4136131600054], [-102.57071668334994, -383.80004781221413, -209.06356205052595], [-101.64314582766114, -383.27864311298134, -211.12620482942282], [-102.94068736401371, -383.340380814366, -216.37330767313495], [-100.83886068131791, -383.6745782584082, -217.0775381551589], [-101.84852197544663, -387.75956122798806, -216.6957890247329], [-101.80838923269387, -382.6425949743271, -214.99349953497625], [-102.93105161252012, -383.78564842211415, -214.12194001233706], [-100.66627691003796, -381.90422765456185, -215.2825093074892], [-103.4197902301541, -384.0907181016484, -213.4221820257943], [-101.28000452642296, -382.9341509907446, -214.49270988772696], [-101.19300699231502, -383.6055725344634, -212.40206351615598], [-106.12406226464938, -387.4329860972993, -213.31560678669922]]}
    # plot3dPose(aaa, 'test-replace')